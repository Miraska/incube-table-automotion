generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // Или другая СУБД
  url      = env("DATABASE_URL")
}

/**
 * Модели для конструктора таблиц (динамические "логические" таблицы).
 */
model TableDefinition {
  id        String   @id @default(cuid())
  name      String   // пользовательское имя таблицы, напр. "Сверка"
  columns   Json?    // можно хранить массив описаний полей
  createdAt DateTime @default(now())

  // Связь "1 ко многим": одна TableDefinition -> несколько Records
  records   Record[]
}

model Record {
  id        String   @id @default(cuid())
  tableId   String
  data      Json     // здесь лежат все значения колонок
  createdAt DateTime @default(now())

  table     TableDefinition @relation(fields: [tableId], references: [id])
}

/**
 * Модели для автоматизаций (Automation, Action, Logs).
 */
model Automation {
  id                String   @id @default(cuid())
  name              String
  triggerType       String   @map("trigger_type")
  triggerConfig     Json?    @map("trigger_config")
  conditions        Json?
  enabled           Boolean  @default(true)
  createdTime       DateTime @default(now()) @map("created_time")
  createdBy         String?  @map("created_by")
  updatedTime       DateTime? @updatedAt @map("last_modified_time")
  tableIdOrName     String?
  watchFields       Json?

  actions           AutomationAction[]
  logs              AutomationExecutionLog[]

  @@map("automations")
}

model AutomationAction {
  id          String   @id @default(cuid())
  automationId String  @map("automation_id")
  order       Int
  type        String
  params      Json?
  conditions  Json?
  createdTime DateTime @default(now()) @map("created_time")
  updatedTime DateTime? @updatedAt @map("last_modified_time")

  automation  Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  actionLogs  AutomationActionExecutionLog[]

  @@map("automation_actions")
}

model AutomationExecutionLog {
  id           String   @id @default(cuid())
  automationId String   @map("automation_id")
  status       String?
  eventData    Json?    @map("event_data")
  result       Json?
  error        String?
  executedAt   DateTime @default(now()) @map("executed_at")

  automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  steps        AutomationActionExecutionLog[]

  @@map("automation_execution_logs")
}

model AutomationActionExecutionLog {
  id          String   @id @default(cuid())
  executionId String   @map("execution_id")
  actionId    String   @map("action_id")
  status      String?
  result      Json?
  error       String?
  executedAt  DateTime @default(now()) @map("executed_at")

  execution   AutomationExecutionLog @relation(fields: [executionId], references: [id], onDelete: Cascade)
  action      AutomationAction       @relation(fields: [actionId], references: [id], onDelete: Cascade)

  @@map("automation_action_execution_logs")
}
