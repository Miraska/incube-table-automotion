generator client {
  provider = "prisma-client-ts"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Дополнительные перечисления для автоматизаций
enum AutomationTriggerType {
  onCreate
  onUpdate
  onDelete
  scheduled
}

enum AutomationActionType {
  updateRecord
  callAPI
  sendNotification
  runScript
}

enum StatusType {
  success
  error
}

// Основная модель автоматизации
model Automation {
  id             String                 @id @default(cuid())
  name           String
  triggerType    AutomationTriggerType  @map("trigger_type")
  // triggerConfig – настройки триггера, например, условия изменения конкретных полей
  triggerConfig  Json?                  @map("trigger_config")
  // conditions – дополнительные условия для запуска автоматизации
  conditions     Json?
  enabled        Boolean                @default(true)
  createdTime    DateTime               @default(now()) @map("created_time")
  createdBy      String                 @map("created_by")
  updatedTime    DateTime?              @updatedAt @map("last_modified_time")

  // Связь с цепочкой действий: каждое действие выполняется последовательно
  actions                 AutomationAction[]
  AutomationExecutionLog  AutomationExecutionLog[]
  AutomationTestRun       AutomationTestRun[]

  @@map("automation")
}

// Модель отдельного шага (действия) в цепочке автоматизации.
// Позволяет задать порядок выполнения, тип действия, его параметры и условия для запуска шага.
model AutomationAction {
  id             String                 @id @default(cuid())
  automationId   String                 @map("automation_id")
  // Порядок выполнения в цепочке (например, 1, 2, 3…)
  order          Int
  type           AutomationActionType
  // Параметры действия в формате JSON (например, для runScript: { script: "return eventData.value*2;" })
  // Нужно подумать как сделать, т.к. нам нужно здесь хранить js-скрипт
  params         Json?
  // Дополнительные условия для выполнения именно этого шага (например, если результат предыдущего шага удовлетворяет условию)
  conditions     Json?
  createdTime    DateTime               @default(now()) @map("created_time")
  updatedTime    DateTime?              @updatedAt @map("last_modified_time")

  automation     Automation             @relation(fields: [automationId], references: [id])

  @@map("automation_action")
}

// Модель для логирования выполнения автоматизаций
model AutomationExecutionLog {
  id            String      @id @default(cuid())
  automationId  String      @map("automation_id")
  // Статус выполнения, например: "success", "error", "partial",
  status        StatusType?  
  // Данные события, вызвавшие автоматизацию
  eventData     Json?       @map("event_data")
  // Результат выполнения (например, данные, возвращённые скриптом или последним действием в цепочке)
  result        Json?
  // Текст ошибки в случае неудачи (если есть)
  error         String?
  executedAt    DateTime    @default(now()) @map("executed_at")

  automation  Automation    @relation(fields: [automationId], references: [id])

  @@map("automation_execution_log")
}

// Модель для тестовых запусков автоматизаций (позволяет проводить тесты перед публикацией)
// Здесь можно сохранить тестовые входные данные, результат выполнения и статус.
model AutomationTestRun {
  id             String     @id @default(cuid())
  automationId   String     @map("automation_id")
  testData       Json       @map("test_data")
  result         Json?
  status         String
  executedAt     DateTime   @default(now()) @map("executed_at")

  automation   Automation  @relation(fields: [automationId], references: [id])

  @@map("automation_test_run")
}
